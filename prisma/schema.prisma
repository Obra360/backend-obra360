generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String          @id @default(uuid()) @db.Uuid
  email           String          @unique
  password        String
  firstName       String
  lastName        String
  role            UserRole        @default(OPERARIO)
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  obras           Obra[]
  RefreshToken    RefreshToken[]
  asistencias     Asistencia[]
  certificaciones Certificacion[]

  @@map("User")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @db.Uuid
  expiresAt DateTime
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("RefreshToken")
}

model Obra {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  empresa   String
  tipo      String
  ciudad    String
  createdAt DateTime   @default(now())
  userId    String     @map("userid") @db.Uuid
  articulos Articulo[]
  user      User       @relation(fields: [userId], references: [id])

  @@map("Obra")
}

model Articulo {
  id          Int          @id @default(autoincrement()) @map("ID_Producto")
  nombre      String       @map("Nombre")
  unidad      String       @map("Unidad")
  cantidad    Int          @map("Cantidad")
  obraId      String       @map("ObraID") @db.Uuid
  obra        Obra         @relation(fields: [obraId], references: [id])
  movimientos Movimiento[]

  @@map("Articulos")
}

model Movimiento {
  id               Int            @id @default(autoincrement()) @map("ID_transaccion")
  idProducto       Int            @map("ID_producto")
  producto         String         @map("Producto")
  cantidad         Int            @map("Cantidad")
  tipoMovimiento   TipoMovimiento @map("Tipo_movimiento")
  fechaTransaccion DateTime       @default(now()) @map("Fecha_transaccion")
  obraDestino      String?        @map("Obra_destino")
  remito           String?        @map("Remito")
  observacion      String?        @map("Observacion")
  precio           Decimal        @map("Precio") @db.Decimal(10, 2)
  tipoUnidad       String         @map("Tipo_unidad")
  precioTotal      Decimal        @map("Precio_total_disponible") @db.Decimal(10, 2)
  role             String?        @map("Role")
  articulo         Articulo       @relation(fields: [idProducto], references: [id])

  @@index([idProducto])
  @@map("Movimientos")
}

model Salario {
  idEmpleado   String  @id(map: "salarios_pkey") @map("id_empleado") @db.VarChar(10)
  nombre       String  @db.VarChar(100)
  apellido     String  @db.VarChar(100)
  dni          Int
  sexo         String  @db.Char(1)
  obrasMensual String? @map("obras_mensual") @db.VarChar(100)
  salario      Float   @db.Real
  recibo       String? @db.VarChar(100)

  @@map("Salarios")
}

model Asistencia {
  id            String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String           @db.Uuid
  fecha         DateTime         @db.Date
  horaEntrada   String?
  horaSalida    String?
  horasTotales  String?
  horasNormales String?
  horasExtra    String?
  observaciones String?
  estado        EstadoAsistencia @default(PENDIENTE) @map("estado")
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @default(now())
  createdBy     String?          @db.Uuid
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, fecha])
  @@index([fecha])
  @@index([userId])
  @@map("asistencias")
}

model Certificacion {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  obra              String
  tipoCertificacion String              @map("tipo_certificacion")
  fecha             DateTime            @db.Date
  estado            EstadoCertificacion @default(PENDIENTE)
  total             Decimal             @default(0) @db.Decimal(12, 2)
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @default(now()) @map("updated_at")
  createdBy         String?             @map("created_by") @db.Uuid
  user              User?               @relation(fields: [createdBy], references: [id])
  items             ItemCertificado[]

  @@index([createdAt])
  @@index([createdBy])
  @@index([estado])
  @@index([fecha])
  @@index([obra])
  @@map("certificaciones")
}

model ItemCertificado {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  certificacionId String        @map("certificacion_id") @db.Uuid
  codigo          String
  descripcion     String
  unidad          String
  cantidad        Decimal       @db.Decimal(10, 3)
  precio          Decimal       @db.Decimal(10, 2)
  subtotal        Decimal       @db.Decimal(12, 2)
  createdAt       DateTime      @default(now()) @map("created_at")
  certificacion   Certificacion @relation(fields: [certificacionId], references: [id], onDelete: Cascade)

  @@index([certificacionId])
  @@index([codigo])
  @@map("items_certificados")
}

enum UserRole {
  ADMIN
  SUPERVISOR
  OPERARIO
}

enum TipoMovimiento {
  ingreso
  venta
}

enum EstadoAsistencia {
  PENDIENTE
  COMPLETO
  EDITADO
  AUSENTE

  @@map("estado_asistencia")
}

enum EstadoCertificacion {
  PENDIENTE
  COMPLETA
  APROBADA
  RECHAZADA
  PAGADA
}
